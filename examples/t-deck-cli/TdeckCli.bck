#include <Arduino.h>
#include <SPI.h>
#include <RadioLib.h>
#include <TFT_eSPI.h>
#include <lvgl.h>
#include <SD.h>
#include "es7210.h"
#include <Audio.h>
#include <driver/i2s.h>
#include <esp_vad.h>

#define TOUCH_MODULES_GT911
#include "TouchLib.h"
#include "utilities.h"
#include "AceButton.h"

#define USING_SX1262



#define VAD_SAMPLE_RATE_HZ              16000
#define VAD_FRAME_LENGTH_MS             30
#define VAD_BUFFER_LENGTH               (VAD_FRAME_LENGTH_MS * VAD_SAMPLE_RATE_HZ / 1000)
#define I2S_CH                          I2S_NUM_1

TFT_eSPI tft = TFT_eSPI();
Audio audio;
size_t          bytes_read;
uint8_t         status;
int16_t         *vad_buff;
vad_handle_t    vad_inst;
TaskHandle_t    playHandle = NULL;
TaskHandle_t    radioHandle = NULL;
int ret =0;
String ssid = "Adel";
String password = "0522718351Adel0522718351";





bool setupSD()
{
    digitalWrite(BOARD_SDCARD_CS, HIGH);
    digitalWrite(RADIO_CS_PIN, HIGH);
    digitalWrite(BOARD_TFT_CS, HIGH);

    if (SD.begin(BOARD_SDCARD_CS, SPI, 800000U)) {
        uint8_t cardType = SD.cardType();
        if (cardType == CARD_NONE) {
            Serial.println("No SD_MMC card attached");
            return false;
        } else {
            Serial.print("SD_MMC Card Type: ");
            if (cardType == CARD_MMC) {
                Serial.println("MMC");
            } else if (cardType == CARD_SD) {
                Serial.println("SDSC");
            } else if (cardType == CARD_SDHC) {
                Serial.println("SDHC");
            } else {
                Serial.println("UNKNOWN");
            }
            uint32_t cardSize = SD.cardSize() / (1024 * 1024);
            uint32_t cardTotal = SD.totalBytes() / (1024 * 1024);
            uint32_t cardUsed = SD.usedBytes() / (1024 * 1024);
            Serial.printf("SD Card Size: %lu MB\n", cardSize);
            Serial.printf("Total space: %lu MB\n",  cardTotal);
            Serial.printf("Used space: %lu MB\n",   cardUsed);
            return true;
        }
    }
    return false;
}
bool setupCoder()
{
    uint32_t ret_val = ESP_OK;

    Wire.beginTransmission(ES7210_ADDR);
    uint8_t error = Wire.endTransmission();
    if (error != 0) {
        Serial.println("ES7210 address not found"); return false;
    }

    audio_hal_codec_config_t cfg = {
        .adc_input = AUDIO_HAL_ADC_INPUT_ALL,
        .codec_mode = AUDIO_HAL_CODEC_MODE_ENCODE,
        .i2s_iface =
        {
            .mode = AUDIO_HAL_MODE_SLAVE,
            .fmt = AUDIO_HAL_I2S_NORMAL,
            .samples = AUDIO_HAL_16K_SAMPLES,
            .bits = AUDIO_HAL_BIT_LENGTH_16BITS,
        },
    };

    ret_val |= es7210_adc_init(&Wire, &cfg);
    ret_val |= es7210_adc_config_i2s(cfg.codec_mode, &cfg.i2s_iface);
    ret_val |= es7210_adc_set_gain(
                   (es7210_input_mics_t)(ES7210_INPUT_MIC1 | ES7210_INPUT_MIC2),
                   (es7210_gain_value_t)GAIN_0DB);
    ret_val |= es7210_adc_set_gain(
                   (es7210_input_mics_t)(ES7210_INPUT_MIC3 | ES7210_INPUT_MIC4),
                   (es7210_gain_value_t)GAIN_37_5DB);
    ret_val |= es7210_adc_ctrl_state(cfg.codec_mode, AUDIO_HAL_CTRL_START);
    return ret_val == ESP_OK;

}
void taskplaySong(void *p)
{
    while (1) {
        if (SD.exists("/key.mp3")) {
            const char *path = "key.mp3";
            audio.setPinout(BOARD_I2S_BCK, BOARD_I2S_WS, BOARD_I2S_DOUT);
            audio.setVolume(12);
            audio.connecttoFS(SD, path);
            Serial.printf("play %s\r\n", path);
            while (audio.isRunning()) {
                audio.loop();
            }
        }
        audio.stopSong();
        vTaskSuspend(NULL);
    }
}

void setup(){
    Serial.begin(115200);
    Serial.println("T-DECK factory");

    //! The board peripheral power control pin needs to be set to HIGH when using the peripheral
    pinMode(BOARD_POWERON, OUTPUT);
    digitalWrite(BOARD_POWERON, HIGH);

    //! Set CS on all SPI buses to high level during initialization
    pinMode(BOARD_SDCARD_CS, OUTPUT);
    pinMode(RADIO_CS_PIN, OUTPUT);
    pinMode(BOARD_TFT_CS, OUTPUT);

    digitalWrite(BOARD_SDCARD_CS, HIGH);
    digitalWrite(RADIO_CS_PIN, HIGH);
    digitalWrite(BOARD_TFT_CS, HIGH);

    pinMode(BOARD_SPI_MISO, INPUT_PULLUP);
    SPI.begin(BOARD_SPI_SCK, BOARD_SPI_MISO, BOARD_SPI_MOSI); //SD
    pinMode(BOARD_BOOT_PIN, INPUT_PULLUP);
    pinMode(BOARD_TBOX_G02, INPUT_PULLUP);
    pinMode(BOARD_TBOX_G01, INPUT_PULLUP);
    pinMode(BOARD_TBOX_G04, INPUT_PULLUP);
    pinMode(BOARD_TBOX_G03, INPUT_PULLUP);

    //Wakeup touch chip
    pinMode(BOARD_TOUCH_INT, OUTPUT);
    digitalWrite(BOARD_TOUCH_INT, HIGH);
    WiFi.disconnect();
    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid.c_str(), password.c_str());
    while (WiFi.status() != WL_CONNECTED){Serial.printf("."); delay(1500);}
    Serial.println("connected");
    bool setup = setupSD();

    tft.begin();
    tft.setRotation(1);
    tft.invertDisplay(0);
    tft.fillScreen(TFT_BLACK);
    tft.setTextColor(TFT_GREEN);
    tft.drawString(String(setup),0,0,2);
    tft.setTextColor(TFT_GREEN,TFT_RED);

    char buf[256];
    ret = setupSD();
    Serial.print("SDCard:"); Serial.println(ret);
    snprintf(buf, 256, "%s:%s\n", "SDCard", ret == true ? "Successed" : "Failed");

    // ret = setupCoder();
    // Serial.print("Decoder:"); Serial.println(ret);
    // snprintf(buf, 256, "%s:%s\n", "Decoder", ret == true ? "Successed" : "Failed");

    if (SD.exists("/key.mp3")) {
        const char *path = "key.mp3";
        audio.setPinout(BOARD_I2S_BCK, BOARD_I2S_WS, BOARD_I2S_DOUT);
        audio.setVolume(12);
        audio.connecttoFS(SD, path);
        Serial.printf("play %s\r\n", path);
        while (audio.isRunning()) {
            audio.loop();
        }
    }
    audio.setPinout(BOARD_I2S_BCK, BOARD_I2S_WS, BOARD_I2S_DOUT);
    audio.setVolume(21);
    Serial.printf("play radio!\r\n");
    audio.connecttospeech("السلام عليكم ورحمة الله وبركاته", "ar");
    while (audio.isRunning()) {
        audio.loop();
    }
    // i2s_config_t i2s_config = {
    //     .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_RX),
    //     .sample_rate = 16000,
    //     .bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT,
    //     .channel_format = I2S_CHANNEL_FMT_ALL_LEFT,
    //     .communication_format = I2S_COMM_FORMAT_STAND_I2S,
    //     .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
    //     .dma_buf_count = 8,
    //     .dma_buf_len = 64,
    //     .use_apll = false,
    //     .tx_desc_auto_clear = true,
    //     .fixed_mclk = 0,
    //     .mclk_multiple = I2S_MCLK_MULTIPLE_256,
    //     .bits_per_chan = I2S_BITS_PER_CHAN_16BIT,
    //     .chan_mask =
    //     (i2s_channel_t)(I2S_TDM_ACTIVE_CH0 | I2S_TDM_ACTIVE_CH1 |
    //                     I2S_TDM_ACTIVE_CH2 | I2S_TDM_ACTIVE_CH3),
    //     .total_chan = 4,
    // };

    // i2s_pin_config_t pin_config = {
    //     .mck_io_num = BOARD_ES7210_MCLK,
    //     .bck_io_num = BOARD_ES7210_SCK,
    //     .ws_io_num = BOARD_ES7210_LRCK,
    //     .data_in_num = BOARD_ES7210_DIN,
    // };
    // i2s_driver_install(I2S_CH, &i2s_config, 0, NULL);
    // i2s_set_pin(I2S_CH, &pin_config);
    // i2s_zero_dma_buffer(I2S_CH);


    // vad_inst = vad_create(VAD_MODE_0);
    // vad_buff = (int16_t *)malloc(VAD_BUFFER_LENGTH * sizeof(short));
    // if (vad_buff == NULL) {
    //     while (1) {
    //         Serial.println("Memory allocation failed!");
    //         delay(1000);
    //     }
    // }

    // Wait until sound is detected before continuing
    // uint32_t c = 0;
    // while (1) {
    //     i2s_read(I2S_CH, (char *)vad_buff, VAD_BUFFER_LENGTH * sizeof(short), &bytes_read, portMAX_DELAY);
    //     // Feed samples to the VAD process and get the result
    //     vad_state_t vad_state = vad_process(vad_inst, vad_buff, VAD_SAMPLE_RATE_HZ, VAD_FRAME_LENGTH_MS);
    //     if (vad_state == VAD_SPEECH) {
    //         Serial.print(millis());
    //         Serial.println("Speech detected");
    //         c++;
    //         snprintf(buf, 256, "%s:%d\n", "Speech detected", c);
    //     }
    //     if (c >= 5)break;
    //     lv_task_handler();
    //     delay(5);
    // }


    //xTaskCreate(taskplaySong, "play", 1024 * 4, NULL, 10, &playHandle);

    //i2s_driver_uninstall(I2S_CH);

    //pinMode(BOARD_BOOT_PIN, INPUT);


}

// int number = 0;
void loop(){
    // tft.drawString(String(number),50,50,7);
    // number++;
    // delay(1000);
}